from app import db, login
from datetime import datetime
from flask_login import UserMixin
from werkzeug.security import generate_password_hash, check_password_hash


class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_name = db.Column(db.String(64), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(60), nullable=False)
    avatar = db.Column(db.String(20), nullable=False, default='avatar.png')
    cover_pic = db.Column(db.String(20), nullable=False, default='cover.png')
    age = db.Column(db.Integer, nullable=False)
    address = db.Column(db.Text, nullable=False)
    register_date = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)

    videos = db.relationship('Video', backref='author', lazy='dynamic')

    def __repr__(self):
        return f"User('{self.user_name}', '{self.email}')"

    def set_password(self, password):
        '''Setting up the password'''

        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        '''Checking the password filled with the password in database'''

        return check_password_hash(self.password_hash, password)


@login.user_loader
def load_user(id):
    '''function to add the user into the session generated by LoginManager'''

    return User.query.get(int(id))


class Video(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    video_title = db.Column(db.String(120), nullable=False)
    video_content = db.Column(db.String(40), nullable=False)
    video_size = db.Column(db.Float, nullable=False)
    views_count = db.Column(db.Integer, nullable=False, default=0)
    upload_time = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    likes_count = db.Column(db.Integer, nullable=False, default=0)
    description = db.Column(db.Text, nullable=False)
    category = db.Column(db.String, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)

    def __repr__(self):
        return f"Video('{self.video_title}', '{self.upload_time}')"


class Likes(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    like = db.Column(db.Integer, nullable=False, default = 0)
    like_time = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    video_id = db.Column(db.Integer, db.ForeignKey('video.id'), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)

    def __repr__(self):
        return f"Video('{self.video_id}', '{self.user_id}', {self.like})"


class Comments(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    comment = db.Column(db.Text, nullable=False)
    comment_time = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    video_id = db.Column(db.Integer, db.ForeignKey('video.id'), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)

    def __repr__(self):
        return f"Video('{self.user_id}', '{self.comment}', {self.video_id})"